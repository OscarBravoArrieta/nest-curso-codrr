0. https://www.youtube.com/watch?v=X-59-aXgFH4&list=PLergODdA95kfcSoXqZZ-IDImO6YaQLYlG


1. Introducción a NestJS | Clase 0 | NestJS de 0 a 100
https://www.youtube.com/watch?v=X-59-aXgFH4



---------------------------------------------------------------------------------------------------

2. Configuración y variables de entorno | Clase 1 | NestJS de 0 a 100
https://www.youtube.com/watch?v=WsqXmi_jJM4

Install package for environment variables: 
npm i --save @nestjs/config

For logs of end point: 
npm install morgan
npm i --save-dev @types/morgan

---------------------------------------------------------------------------------------------------
3. Docker compose y PostgresDB | Clase 2 | NestJS de 0 a 100

run: docker-compose up
down: docker system prune -a
---------------------------------------------------------------------------------------------------
4. Iniciando con TypeORM | Clase 3 (P1) | NestJS de 0 a 100
https://www.youtube.com/watch?v=EknyyE7RAEk
8:00

Installing typeorm an the postgres client:  npm install --save @nestjs/typeorm typeorm pg
instalation de strategy: npm install typeorm-naming-strategies
generate a new module: nest generate module projects

---------------------------------------------------------------------------------------------------
Relacion custom Many to Many y Migraciones | Clase 3 (P2) | NestJS de 0 a 100
https://www.youtube.com/watch?v=QPKN0pZradM

Configurate scripts in packaje.json
    "orm:init": "typeorm-ts-node-esm -d ./src/config/data.source.ts",
    "m:gen": "set NODE_ENV=develop && npm run orm:init migration:generate",
    "m:run": "set NODE_ENV=develop && npm run orm:init migration:run"

    1. orm:init: Ejecución del clienmte de typeorm para especificar donde se encuentra el archivo datasource, este es ejecutado dentro de los dos siguientes


    2. Generación de las  migraciones, se debe especificar la carpeta en donde se guardaron las migraciones: npm run m:gen ./migrations/init

    3.  Correr las migraciones: npm run m:run

to exclude the migrations during compilation, in the tsconfig.build.json file
"migrations/*"

---------------------------------------------------------------------------------------------------
DTOs, Patron repositorio y Servicios | Clase 4 | NestJS de 0 a 100
https://www.youtube.com/watch?v=_sVnRC3mIko

Calss validator instalarion: npm i --save class-validator class-transformer

Configurate validation 
     app.useGlobalPipes(
         new ValidationPipe({
             transformOptions: {
                 enableImplicitConversion: true,
             }

         })
     )
     
 update the user.module

      imports: [
         TypeOrmModule.forFeature([UsersEntity])
     ],

---------------------------------------------------------------------------------------------------
Error Handlers y Controladores | Clase 5 | NestJS de 0 a 100
Manejo de errores
https://www.youtube.com/watch?v=7uX7c-9iObM



---------------------------------------------------------------------------------------------------
Relaciones con Query Builder | Clase 6 | NestJS de 0 a 100
https://www.youtube.com/watch?v=pXYAwYq9gfw



===================================================================================================
===================================================================================================
https://www.youtube.com/watch?v=NBR2AoHfKSo
Autenticación de usuarios + Tip de TypeScript | Clase 7 | NestJS de 0 a 100

1. Creación de una carpeta llamad index.d.ts types y dentro de ella un archivo llavado index.d.ts La "d" es de declaraciones
Con esto es posible que TypeScript muestre ayuda al escribir  process.env. 

2. instalación de paquetes para encriptar la contraseña:
npm i bcrypt
npm i jsonwebtoken
npm i --save-dev @types/bcrypt

Se procede a realizar la encriptación de la contraseña en el método createUser

3. Instalación de class transformer: npm i class-transformer
Esto permite colocar en la entidad un decorador  @Exclude(), para evitar que uno o mas campos se muesteb en la consulta, por ejemplo el password
Se requiere para esto hacer una configuración en el archivo main

4. Generar un modulo auth:  nest generate module auth

5. Generar un servivio: nest generate service auth/services/auth

6. Generar un controlador: nest generate controller auth/controllers/auth --flat

7. Colocar la etiquet @Global() en el módulo

8. Instalación: npm i --save-dev @types/jsonwebtoken
23:00


---------------------------------------------------------------------------------------------------

